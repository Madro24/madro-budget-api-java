/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
  id 'com.google.protobuf' version '0.9.4'
}

group = 'madro.finances.budget'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '22'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

ext {
	springCloudVersion = "2023.0.3"
    mapstructVersion = "1.6.0"
    lombokVersion = "1.18.30"
    lombokMapstructBindingVersion = "0.2.0"
    mysqlVersion = "8.0.33"
    devtoolsVersion = "3.3.5"
    swaggerVersion = "2.6.0"
    grpcSpringVersion = "3.1.0.RELEASE"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    // https://mvnrepository.com/artifact/net.devh/grpc-spring-boot-starter
    implementation "net.devh:grpc-spring-boot-starter:${grpcSpringVersion}"

    //add dependency for spring boot application
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.h2database:h2'
    runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"


    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // Enable MapStruct verbose mode
    tasks.withType(JavaCompile) {
        options.compilerArgs += [
            '-Amapstruct.verbose=true',
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=ERROR'
        ]
    }

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'

    implementation "org.springframework.boot:spring-boot-devtools:${devtoolsVersion}"

    // import swagger doc
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${swaggerVersion}"

    // add prometheus registry
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

springBoot {
    mainClass = 'madro.finances.budget.App'
}

// task for creating jar file for a standalone spring boot web application
bootJar {
    enabled = true
    archiveFileName = "madro-budget-api.jar"
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        '-Amapstruct.verbose=true',
        '-Amapstruct.defaultComponentModel=spring',
        '-Amapstruct.unmappedTargetPolicy=ERROR'
    ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorPath = configurations.annotationProcessor
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.25.5"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
    }
  }
  generateProtoTasks {
    all().each { task ->
        task.plugins {
          grpc {}
        }
    }
  }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc', 'build/generated/source/proto/main/java'
        }
    }
}